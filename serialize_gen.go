//go:build ignore

package main

import (
	"fmt"
	"os"
	"strings"
)

func main() {
	funcName := os.Args[1]
	typeName := os.Args[2]

	f, err := os.Create(fmt.Sprintf("gen_serializer_%s.go", funcName))
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Fprintf(f, "// Code generated by serialize_gen. DO NOT EDIT.\npackage main\n\nimport \"io\"\n\n")

	// write read function
	fmt.Fprintf(f, "func Read%s(r io.Reader, b *%s) error {\n", funcName, typeName)
	for i := 3; i < len(os.Args); i++ {
		tp := strings.Split(os.Args[i], ":")
		if tp[0] == "nil" {
			fmt.Fprintf(f, "    if _, err := r.Read(make([]byte, %s)); err != nil {\n", tp[1])
		} else if tp[1][0] == '!' {
			fmt.Fprintf(f, "    if err := Read%s(r, &b.%s); err != nil {\n", tp[1][1:], tp[0])
		} else if tp[1] == "u8" {
			fmt.Fprintf(f, "    if err := ReadPByte(r, &b.%s); err != nil {\n", tp[0])
		} else if tp[1] == "i16" {
			fmt.Fprintf(f, "    if err := ReadPShort(r, &b.%s); err != nil {\n", tp[0])
		} else if tp[1] == "bool" {
			fmt.Fprintf(f, "    if err := ReadPBool(r, &b.%s); err != nil {\n", tp[0])
		} else if tp[1] == "[]byte" {
			fmt.Fprintf(f, "    if err := ReadPStringBytes(r, &b.%s, %s); err != nil {\n", tp[0], tp[2])
		} else if tp[1] == "string" {
			fmt.Fprintf(f, "    if err := ReadPString(r, &b.%s, %s); err != nil {\n", tp[0], tp[2])
		} else if tp[1] == "array" {
			fmt.Fprintf(f, "    if _, err := r.Read(b.%s[:]); err != nil {\n", tp[0])
		} else {
			panic(fmt.Errorf("unknown type: %s", tp[1]))
		}
		fmt.Fprintf(f, "        return err\n")
		fmt.Fprintf(f, "    }\n")
	}
	fmt.Fprintf(f, "    return nil\n}\n\n")

	// write write function
	fmt.Fprintf(f, "func Write%s(w io.Writer, b %s) error {\n", funcName, typeName)
	for i := 3; i < len(os.Args); i++ {
		tp := strings.Split(os.Args[i], ":")
		if tp[0] == "nil" {
			fmt.Fprintf(f, "    if _, err := w.Write(make([]byte, %s)); err != nil {\n", tp[1])
		} else if tp[1][0] == '!' {
			fmt.Fprintf(f, "    if err := Write%s(w, b.%s); err != nil {\n", tp[1][1:], tp[0])
		} else if tp[1] == "u8" {
			fmt.Fprintf(f, "    if err := WritePByte(w, b.%s); err != nil {\n", tp[0])
		} else if tp[1] == "i16" {
			fmt.Fprintf(f, "    if err := WritePShort(w, b.%s); err != nil {\n", tp[0])
		} else if tp[1] == "bool" {
			fmt.Fprintf(f, "    if err := WritePBool(w, b.%s); err != nil {\n", tp[0])
		} else if tp[1] == "[]byte" {
			fmt.Fprintf(f, "    if err := WritePString(w, b.%s, %s); err != nil {\n", tp[0], tp[2])
		} else if tp[1] == "string" {
			fmt.Fprintf(f, "    if err := WritePString(w, []byte(b.%s), %s); err != nil {\n", tp[0], tp[2])
		} else if tp[1] == "array" {
			fmt.Fprintf(f, "    if _, err := w.Write(b.%s[:]); err != nil {\n", tp[0])
		} else {
			panic(fmt.Errorf("unknown type: %s", tp[1]))
		}
		fmt.Fprintf(f, "        return err\n")
		fmt.Fprintf(f, "    }\n")
	}
	fmt.Fprintf(f, "    return nil\n}\n\n")
}
